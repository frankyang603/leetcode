class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        // for(int i=0;i<courses.size();i++){
        //     courses[i][0]=courses[i][1]-courses[i][0];
        // }
        
        sort(courses.begin(),courses.end(),sortcol);
        reverse(courses.begin(),courses.end());
        
        // return courses[1][0];
        // vector <int>interval;
        // for(int i=0;i<courses.size();i++){
        //     interval.push_back(courses[i][1]-courses[i][0]);
        // }
        int count=0;
        int now=0;
        priority_queue <int> p;
        for(int i=0;i<courses.size();i++){
            if(courses[i][0]+now>courses[i][1]){
                if(p.empty()!=true&&courses[i][0]<p.top()){
                    int x = p.top();;
                    p.pop();
                    now-=x;
                    now+=courses[i][0];
                    p.push(courses[i][0]);
                }
            }
            else{
                p.push(courses[i][0]);
                now+=courses[i][0];
                count++;
            }
        }
        return count;
//         int temp=courses[courses.size()-1][1];
        
//         int i=courses.size()-1;
//         // vector <int> debug;
//         while(i>=0){
//             if(temp-interval[i]>=0&&courses[i][0]>=0){
//                 temp=temp-interval[i];
//                 count++;
//                 // debug.push_back(temp);
//             }
//             i--;
            
//         }
//         // cout<<debug[0];
        
    }
    static bool sortcol(const vector<int> &v1,const vector<int> &v2){
           return v1[1]>v2[1];
    }
    
    
    
};