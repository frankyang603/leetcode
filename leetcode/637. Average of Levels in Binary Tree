/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
vector <double> out;
vector <int> count;
int a[10000];
int b[10000];
public:
    vector<double> averageOfLevels(TreeNode* root) {
        
        find(0,root);
        for(int i=0;i<count.size();i++){
            out[i]=out[i]/count[i];
        }
        out.insert(out.begin(),root->val);
        return out;
    }
    
    void find(int n,TreeNode *root){
        // vector <double> out;
        if(root->left){
            if(out.size()<=n){
                out.push_back(root->left->val);
                count.push_back(1);
            }
            else{
                out[n]+=root->left->val;
                count[n]++;
            }
            find(n+1,root->left);
        }
        if(root->right){
            if(out.size()<=n){
                out.push_back(root->right->val);
                count.push_back(1);
            }
            else{
                out[n]+=root->right->val;
                count[n]++;
            }
            find(n+1,root->right);
        }
        
    }
};