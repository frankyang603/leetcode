class Solution {
public:
    bool canJump(vector<int>& nums) {
        int h=nums.size();
        vector<int> store;
        int max=*max_element(nums.begin(), nums.end());
        if(h==1){
            return 1;
        }
        if(nums[0]==0){
            return 0;
        }
        for(int i=0;i<h+max;i++){
            store.push_back(0);
        }
        
        int k=jump(store,nums,0);
        return k;
    }
    
//     int jump(vector<int>& nums,int index){
//         // int h=nums.size();
//         if(index<=0){
//             return 1;
//         }
//         for(int i=index;i>=0;i--){
//             if(nums[i]+i>=index+1){
//                 int a=jump(nums,i-1);
//                 if(a==1){
//                     return 1;
//                 }
//             }
//         }
//         return 0;
//     }
    
    
    
    int jump(vector<int>& store,vector<int>& nums,int index){
       
        if(index>=nums.size()-1){
            return 1;
        } 
        if(nums[index]==0){
            store[index]=1;
            return 0;
        }
        int n=nums[index];        
        for(int i=n;i>=1;i--){
            if(store[index+i]==0){
                int a=jump(store,nums,index+i);
                if(a==1){
                    return 1;
                }
                else{
                    store[index+i]=1;
                }
            }
            
        }
        return 0;
    }
    
};